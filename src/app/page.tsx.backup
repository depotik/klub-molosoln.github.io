'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Badge } from '@/components/ui/badge'
import { Settings, User, Briefcase, CreditCard, Send, Moon, Sun, Users, Briefcase as Work, DollarSign as MoneyIcon, Clock } from 'lucide-react'

interface UserData {
  id: string
  nickname: string
  balance: number
  isAdmin: boolean
  theme: string
  job?: {
    title: string
    salary: number
  }
  credits: Array<{
    id: string
    amount: number
  }>
}

interface GameSettings {
  isDay: boolean
  lastDayChange: string
}

const themes = {
  space: {
    name: 'üåå –ö–æ—Å–º–æ—Å',
    bg: 'bg-gradient-to-br from-purple-900 via-blue-900 to-black',
    text: 'text-white',
    card: 'bg-gray-900/90 backdrop-blur-sm border-purple-500/30 shadow-2xl',
    button: 'bg-purple-600 hover:bg-purple-700 text-white shadow-lg',
    accent: 'purple',
    glow: 'shadow-purple-500/25'
  },
  neon: {
    name: 'üí´ –ù–µ–æ–Ω',
    bg: 'bg-gradient-to-br from-pink-500 via-purple-500 to-indigo-500',
    text: 'text-white',
    card: 'bg-black/90 backdrop-blur-sm border-pink-400/30 shadow-2xl',
    button: 'bg-pink-500 hover:bg-pink-600 text-white shadow-lg',
    accent: 'pink',
    glow: 'shadow-pink-500/25'
  },
  sunset: {
    name: 'üåÖ –ó–∞–∫–∞—Ç',
    bg: 'bg-gradient-to-br from-orange-400 via-red-500 to-pink-500',
    text: 'text-gray-900',
    card: 'bg-white/95 backdrop-blur-sm border-orange-300/50 shadow-2xl',
    button: 'bg-orange-500 hover:bg-orange-600 text-white shadow-lg',
    accent: 'orange',
    glow: 'shadow-orange-500/25'
  },
  ice: {
    name: '‚ùÑÔ∏è –õ—ë–¥',
    bg: 'bg-gradient-to-br from-cyan-400 via-blue-400 to-indigo-500',
    text: 'text-gray-900',
    card: 'bg-white/95 backdrop-blur-sm border-cyan-300/50 shadow-2xl',
    button: 'bg-cyan-500 hover:bg-cyan-600 text-white shadow-lg',
    accent: 'cyan',
    glow: 'shadow-cyan-500/25'
  },
  matrix: {
    name: 'üíª –ú–∞—Ç—Ä–∏—Ü–∞',
    bg: 'bg-gradient-to-br from-green-900 via-black to-green-900',
    text: 'text-green-400',
    card: 'bg-black/95 backdrop-blur-sm border-green-500/30 shadow-2xl',
    button: 'bg-green-600 hover:bg-green-700 text-white shadow-lg',
    accent: 'green',
    glow: 'shadow-green-500/25'
  },
  dark: {
    name: 'üåë –¢—å–º–∞',
    bg: 'bg-gradient-to-br from-gray-900 via-black to-gray-900',
    text: 'text-gray-300',
    card: 'bg-gray-800/95 backdrop-blur-sm border-gray-600/30 shadow-2xl',
    button: 'bg-gray-700 hover:bg-gray-600 text-white shadow-lg',
    accent: 'gray',
    glow: 'shadow-gray-500/25'
  },
  ocean: {
    name: 'üåä –û–∫–µ–∞–Ω—Å–∫–∞—è',
    bg: 'bg-gradient-to-br from-blue-600 via-teal-500 to-cyan-500',
    text: 'text-gray-900',
    card: 'bg-white/95 backdrop-blur-sm border-blue-300/50 shadow-2xl',
    button: 'bg-blue-500 hover:bg-blue-600 text-white shadow-lg',
    accent: 'blue',
    glow: 'shadow-blue-500/25'
  }
}

export default function Home() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [gameSettings, setGameSettings] = useState<GameSettings | null>(null)
  const [nickname, setNickname] = useState('')
  const [isLoading, setIsLoading] = useState(true)
  const [showAdminLogin, setShowAdminLogin] = useState(false)
  const [adminCode, setAdminCode] = useState('')
  const [isAdmin, setIsAdmin] = useState(false)
  const [creditAmount, setCreditAmount] = useState(0)
  const [transferAmount, setTransferAmount] = useState(0)
  const [transferReceiver, setTransferReceiver] = useState('')
  const [adminPlayers, setAdminPlayers] = useState([])
  const [adminJobs, setAdminJobs] = useState([])
  const [selectedPlayer, setSelectedPlayer] = useState('')
  const [jobTitle, setJobTitle] = useState('')
  const [jobSalary, setJobSalary] = useState('')
  const [deductAmount, setDeductAmount] = useState('')
  const [showNightMessage, setShowNightMessage] = useState(false)
  const [creditReminder, setCreditReminder] = useState(false)

  useEffect(() => {
    loadUserData()
    loadGameSettings()
    if (isAdmin) {
      loadAdminData()
    }
    
    // Check for credit reminder
    const checkCredits = () => {
      if (userData && userData.credits.length > 0) {
        const totalDebt = userData.credits.reduce((sum, credit) => sum + credit.amount, 0)
        if (totalDebt > 0) {
          setCreditReminder(true)
          setTimeout(() => setCreditReminder(false), 5000) // Show for 5 seconds
        }
      }
    }
    
    const creditInterval = setInterval(checkCredits, 30000) // Check every 30 seconds
    checkCredits() // Check immediately
    
    return () => clearInterval(creditInterval)
  }, [isAdmin, userData])

  const loadAdminData = async () => {
    try {
      const [playersResponse, jobsResponse] = await Promise.all([
        fetch('/api/admin/players'),
        fetch('/api/admin/jobs')
      ])
      
      if (playersResponse.ok) {
        const players = await playersResponse.json()
        setAdminPlayers(players)
      }
      
      if (jobsResponse.ok) {
        const jobs = await jobsResponse.json()
        setAdminJobs(jobs)
      }
    } catch (error) {
      console.error('Error loading admin data:', error)
    }
  }

  const loadUserData = async () => {
    try {
      const response = await fetch('/api/user')
      if (response.ok) {
        const data = await response.json()
        setUserData(data)
        setNickname(data.nickname)
        setIsAdmin(data.isAdmin)
      }
    } catch (error) {
      console.error('Error loading user data:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const loadGameSettings = async () => {
    try {
      const response = await fetch('/api/game-settings')
      if (response.ok) {
        const data = await response.json()
        setGameSettings(data)
      }
    } catch (error) {
      console.error('Error loading game settings:', error)
    }
  }

  const handleSaveNickname = async () => {
    if (!nickname.trim()) return
    
    try {
      const response = await fetch('/api/user', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ nickname })
      })
      
      if (response.ok) {
        const data = await response.json()
        setUserData(data)
      }
    } catch (error) {
      console.error('Error saving nickname:', error)
    }
  }

  const handleAdminLogin = async () => {
    if (adminCode === 'cucumber') {
      setIsAdmin(true)
      setShowAdminLogin(false)
      setAdminCode('')
    }
  }

  const handleTakeCredit = async () => {
    if (creditAmount <= 0) return
    
    try {
      const response = await fetch('/api/credits', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: creditAmount })
      })
      
      if (response.ok) {
        setCreditAmount(0)
        loadUserData()
      }
    } catch (error) {
      console.error('Error taking credit:', error)
    }
  }

  const handleTransfer = async () => {
    if (transferAmount <= 0 || !transferReceiver.trim()) return
    
    try {
      const response = await fetch('/api/transfer', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          amount: transferAmount, 
          receiverNickname: transferReceiver 
        })
      })
      
      if (response.ok) {
        setTransferAmount(0)
        setTransferReceiver('')
        loadUserData()
      } else {
        const error = await response.json()
        alert(error.error || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞')
      }
    } catch (error) {
      console.error('Error transferring money:', error)
    }
  }

  const handleAssignJob = async () => {
    if (!selectedPlayer || !jobTitle || !jobSalary) return
    
    try {
      const response = await fetch('/api/admin/jobs', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: selectedPlayer, 
          title: jobTitle, 
          salary: Number(jobSalary) 
        })
      })
      
      if (response.ok) {
        setSelectedPlayer('')
        setJobTitle('')
        setJobSalary('')
        loadAdminData()
      }
    } catch (error) {
      console.error('Error assigning job:', error)
    }
  }

  const handleDeductMoney = async () => {
    if (!selectedPlayer || !deductAmount) return
    
    try {
      const response = await fetch('/api/admin/deduct', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          userId: selectedPlayer, 
          amount: Number(deductAmount) 
        })
      })
      
      if (response.ok) {
        setDeductAmount('')
        loadAdminData()
      }
    } catch (error) {
      console.error('Error deducting money:', error)
    }
  }

  const handleDayNightChange = async (action: 'end-day' | 'end-night') => {
    try {
      const response = await fetch('/api/admin/day-night', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action })
      })
      
      if (response.ok) {
        loadGameSettings()
        if (action === 'end-day') {
          setShowNightMessage(true)
          setTimeout(() => setShowNightMessage(false), 3000)
        }
        loadAdminData()
      }
    } catch (error) {
      console.error('Error changing day/night:', error)
    }
  }

  const handleAddMoney = async (userId: string, amount: number) => {
    try {
      const response = await fetch('/api/admin/add-money', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, amount })
      })
      
      if (response.ok) {
        loadAdminData()
        const input = document.querySelector('input[placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"]') as HTMLInputElement
        if (input) input.value = ''
      }
    } catch (error) {
      console.error('Error adding money:', error)
    }
  }

  const currentTheme = userData ? themes[userData.theme as keyof typeof themes] : themes.space

  if (isLoading) {
    return (
      <div className={`flex items-center justify-center min-h-screen ${currentTheme.bg}`}>
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-white"></div>
      </div>
    )
  }

  return (
    <div className={`min-h-screen ${currentTheme.bg} ${currentTheme.text} relative overflow-hidden`}>
      {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã */}
      <div className="fixed inset-0 pointer-events-none z-0">
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-currentTheme.accent/20 to-transparent animate-pulse"></div>
        <div 
          className="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-30"
          style={{
            backgroundImage: 'url(/globe-bg.png)',
            filter: `hue-rotate(${currentTheme.accent === 'purple' ? '270deg' : 
                              currentTheme.accent === 'pink' ? '320deg' : 
                              currentTheme.accent === 'orange' ? '30deg' : 
                              currentTheme.accent === 'cyan' ? '180deg' : 
                              currentTheme.accent === 'green' ? '120deg' : 
                              currentTheme.accent === 'gray' ? '0deg' : '210deg'})`,
            boxShadow: `inset 0 0 100px ${currentTheme.accent === 'purple' ? 'rgba(147, 51, 234, 0.3)' : 
                             currentTheme.accent === 'pink' ? 'rgba(236, 72, 153, 0.3)' : 
                             currentTheme.accent === 'orange' ? 'rgba(249, 115, 22, 0.3)' : 
                             currentTheme.accent === 'cyan' ? 'rgba(6, 182, 212, 0.3)' : 
                             currentTheme.accent === 'green' ? 'rgba(34, 197, 94, 0.3)' : 
                             currentTheme.accent === 'gray' ? 'rgba(107, 114, 128, 0.3)' : 'rgba(59, 130, 246, 0.3)'}`
          }}
        ></div>
      </div>
      
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="relative z-10 p-4">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –î–µ–Ω—å–≥–∏, –†–∞–±–æ—Ç–∞, –ò–º—è */}
          <div className="flex flex-wrap items-center gap-2 sm:gap-4 w-full sm:w-auto">
            <div className="flex items-center gap-2 bg-black/30 px-4 py-3 rounded-2xl backdrop-blur-md border border-white/10 shadow-lg">
              <span className="font-bold text-base sm:text-lg">üçÉ {userData?.balance || 0}</span>
            </div>
            <div className="flex items-center gap-2 bg-black/30 px-4 py-3 rounded-2xl backdrop-blur-md border border-white/10 shadow-lg">
              <span className="font-bold text-base sm:text-lg">üíº {userData?.job?.title || '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π'}</span>
            </div>
            <div className="flex items-center gap-2 bg-black/30 px-4 py-3 rounded-2xl backdrop-blur-md border border-white/10 shadow-lg">
              <span className="font-bold text-base sm:text-lg">üë§ {userData?.nickname || '–ê–Ω–æ–Ω–∏–º'}</span>
            </div>
          </div>
          
          {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –î–µ–Ω—å/–ù–æ—á—å –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ */}
          <div className="flex flex-wrap items-center justify-center gap-2 sm:gap-4 w-full">
            <div className="flex items-center gap-2 bg-black/30 px-4 py-3 rounded-2xl backdrop-blur-md border border-white/10 shadow-lg">
              {gameSettings?.isDay ? <Sun className="h-5 w-5 text-yellow-400" /> : <Moon className="h-5 w-5 text-indigo-400" />}
              <span className="font-bold text-base sm:text-lg">{gameSettings?.isDay ? '‚òÄÔ∏è –î–µ–Ω—å' : 'üåô –ù–æ—á—å'}</span>
            </div>
          </div>
          
          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É */}
          <div className="absolute top-4 right-4 z-20">
            <Dialog>
              <DialogTrigger asChild>
                <Button className={`${currentTheme.button} text-white shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 p-3 rounded-full`}>
                  <Settings className="h-6 w-6" />
                </Button>
              </DialogTrigger>
            <DialogContent className={`${currentTheme.card} ${currentTheme.text} border-2 max-w-md mx-4 shadow-2xl backdrop-blur-md`}>
              <DialogHeader>
                <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent">
                  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </DialogTitle>
              </DialogHeader>
              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium mb-3 text-lg font-bold text-white drop-shadow-lg">üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</label>
                  <div className="grid grid-cols-2 gap-3">
                    {Object.entries(themes).map(([key, theme]) => (
                      <Button
                        key={key}
                        variant={userData?.theme === key ? "default" : "outline"}
                        onClick={async () => {
                          try {
                            await fetch('/api/user/theme', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ theme: key })
                            })
                            loadUserData()
                          } catch (error) {
                            console.error('Error updating theme:', error)
                          }
                        }}
                        className={`text-sm h-14 transition-all duration-300 transform hover:scale-105 flex items-center justify-center gap-2 ${
                          userData?.theme === key 
                            ? `${currentTheme.button} text-white shadow-lg scale-105 ring-2 ring-white/50 font-bold` 
                            : 'bg-white/10 hover:bg-white/20 border-white/20 text-white font-bold'
                        }`}
                      >
                        <span className="text-lg font-bold text-white drop-shadow-lg">{theme.name}</span>
                      </Button>
                    ))}
                  </div>
                </div>
                
                <div className="pt-4 border-t border-current/20">
                  <Button 
                    onClick={() => {
                      if (!isAdmin) {
                        setShowAdminLogin(true)
                      } else {
                        setIsAdmin(false)
                      }
                    }}
                    className={`w-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 py-4 ${
                      isAdmin 
                        ? 'bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800' 
                        : 'bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700'
                    } text-white`}
                  >
                    {isAdmin ? 'üîí –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏' : 'üîë –í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å */}
      <div className="relative z-10 flex-1 flex items-center justify-center p-4 sm:p-8 min-h-[50vh]">
        <div className="text-center">
          <div className="mb-8">
            <h1 className={`text-4xl sm:text-6xl md:text-7xl lg:text-8xl font-bold mb-4 bg-gradient-to-r from-green-400 via-blue-500 to-purple-500 bg-clip-text text-transparent animate-pulse`}>
              –ö–ª—É–± –º–æ–ª–æ—Å–æ–ª—å–Ω—ã—Ö –æ–≥—É—Ä—á–∏–∫–æ–≤ü•í
            </h1>
          </div>
        </div>
      </div>

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –≤–≤–æ–¥–æ–º –∏–º–µ–Ω–∏ –∏ –≤–∫–ª–∞–¥–∫–∞–º–∏ */}
      <div className="relative z-10 p-4">
        <div className="max-w-4xl mx-auto">
          {!userData?.nickname && (
            <div className="mb-6">
              <div className="flex flex-col sm:flex-row gap-2">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–æ–∑–≤–∏—â–µ"
                  value={nickname}
                  onChange={(e) => setNickname(e.target.value)}
                  className="flex-1 bg-white/10 backdrop-blur-sm border-white/20"
                />
                <Button 
                  onClick={handleSaveNickname} 
                  disabled={!nickname.trim()}
                  className={`${currentTheme.button} text-white shadow-lg`}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
              </div>
              <p className="text-sm opacity-70 mt-2">–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∑–≤–∏—â–µ –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è</p>
            </div>
          )}

          <Tabs defaultValue="credit" className="w-full">
            <TabsList className="grid w-full grid-cols-2 h-12">
              <TabsTrigger value="credit" className="flex items-center gap-2 text-sm">
                <CreditCard className="h-4 w-4" />
                –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
              </TabsTrigger>
              <TabsTrigger value="transfer" className="flex items-center gap-2 text-sm">
                <Send className="h-4 w-4" />
                –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="credit">
              <Card className={`${currentTheme.card} ${currentTheme.text} border-2 mt-4`}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CreditCard className="h-5 w-5" />
                    –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞</label>
                      <Input 
                        type="number" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                        value={creditAmount}
                        onChange={(e) => setCreditAmount(Number(e.target.value))}
                        className="bg-white/10 backdrop-blur-sm border-white/20"
                      />
                    </div>
                    <Button 
                      onClick={handleTakeCredit}
                      disabled={creditAmount <= 0}
                      className={`w-full ${currentTheme.button} text-white shadow-lg`}
                    >
                      –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
                    </Button>
                    <p className="text-sm opacity-70">
                      üí° –í–Ω–∏–º–∞–Ω–∏–µ: 30% –æ—Ç –≤–∞—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="transfer">
              <Card className={`${currentTheme.card} ${currentTheme.text} border-2 mt-4`}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Send className="h-5 w-5" />
                    –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium mb-2">–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</label>
                      <Input 
                        type="number" 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                        value={transferAmount}
                        onChange={(e) => setTransferAmount(Number(e.target.value))}
                        className="bg-white/10 backdrop-blur-sm border-white/20"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-2">–ù–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</label>
                      <Input 
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞"
                        value={transferReceiver}
                        onChange={(e) => setTransferReceiver(e.target.value)}
                        className="bg-white/10 backdrop-blur-sm border-white/20"
                      />
                    </div>
                    <Button 
                      onClick={handleTransfer}
                      disabled={transferAmount <= 0 || !transferReceiver.trim()}
                      className={`w-full ${currentTheme.button} text-white shadow-lg`}
                    >
                      –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å */}
      {showAdminLogin && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-md border-2 shadow-2xl">
            <CardHeader className="text-center">
              <CardTitle className="text-2xl font-bold">üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</CardTitle>
              <p className="text-sm opacity-70">–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</p>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥</label>
                  <Input
                    type="password"
                    value={adminCode}
                    onChange={(e) => setAdminCode(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
                    className="text-center text-lg tracking-wider"
                  />
                </div>
                <div className="flex gap-2">
                  <Button 
                    onClick={handleAdminLogin} 
                    className="flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white"
                  >
                    –í–æ–π—Ç–∏
                  </Button>
                  <Button 
                    onClick={() => {
                      setShowAdminLogin(false)
                      setAdminCode('')
                    }} 
                    variant="outline"
                    className="flex-1"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å */}
      {isAdmin && (
        <div className="fixed top-4 right-4 z-40">
          <Dialog>
            <DialogTrigger asChild>
              <Badge variant="destructive" className="cursor-pointer shadow-2xl hover:shadow-3xl transition-all duration-300 px-6 py-3 text-lg font-bold bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 transform hover:scale-105">
                üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
              </Badge>
            </DialogTrigger>
            <DialogContent className="max-w-7xl max-h-[95vh] overflow-y-auto border-4 shadow-3xl backdrop-blur-md bg-black/80">
              <DialogHeader>
                <DialogTitle className="text-3xl font-bold flex items-center gap-3 bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
                  üéõÔ∏è –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                </DialogTitle>
                <p className="text-lg opacity-80">–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∏–≥—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π</p>
              </DialogHeader>
              <div className="space-y-8">
                <Tabs defaultValue="players" className="w-full">
                  <TabsList className="grid w-full grid-cols-5 h-16 bg-black/50 p-2 rounded-xl">
                    <TabsTrigger value="players" className="flex flex-col items-center gap-2 text-sm py-3 data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white">
                      <Users className="h-6 w-6" />
                      –ò–≥—Ä–æ–∫–∏
                    </TabsTrigger>
                    <TabsTrigger value="jobs" className="flex flex-col items-center gap-2 text-sm py-3 data-[state=active]:bg-gradient-to-r data-[state=active]:from-green-500 data-[state=active]:to-emerald-500 data-[state=active]:text-white">
                      <Work className="h-6 w-6" />
                      –†–∞–±–æ—Ç—ã
                    </TabsTrigger>
                    <TabsTrigger value="money" className="flex flex-col items-center gap-2 text-sm py-3 data-[state=active]:bg-gradient-to-r data-[state=active]:from-yellow-500 data-[state=active]:to-orange-500 data-[state=active]:text-white">
                      <MoneyIcon className="h-6 w-6" />
                      –§–∏–Ω–∞–Ω—Å—ã
                    </TabsTrigger>
                    <TabsTrigger value="time" className="flex flex-col items-center gap-2 text-sm py-3 data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white">
                      <Clock className="h-6 w-6" />
                      –í—Ä–µ–º—è
                    </TabsTrigger>
                    <TabsTrigger value="settings" className="flex flex-col items-center gap-2 text-sm py-3 data-[state=active]:bg-gradient-to-r data-[state=active]:from-gray-500 data-[state=active]:to-slate-500 data-[state=active]:text-white">
                      <Settings className="h-6 w-6" />
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="players">
                    <Card className="bg-black/60 backdrop-blur-sm border-2 border-blue-500/30 shadow-2xl">
                      <CardHeader className="bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-t-lg">
                        <CardTitle className="text-xl font-bold flex items-center gap-2">
                          <Users className="h-6 w-6 text-blue-400" />
                          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º–∏
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-4">
                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
                            {adminPlayers.map((player: any) => (
                              <div key={player.id} className="bg-black/40 p-4 rounded-lg border border-white/10 hover:border-blue-400/50 transition-all">
                                <div className="flex items-center justify-between mb-2">
                                  <span className="font-bold text-blue-400">üë§ {player.nickname}</span>
                                  <Badge variant={player.isAdmin ? "destructive" : "secondary"}>
                                    {player.isAdmin ? "–ê–¥–º–∏–Ω" : "–ò–≥—Ä–æ–∫"}
                                  </Badge>
                                </div>
                                <div className="text-sm space-y-1">
                                  <div>üçÉ –ë–∞–ª–∞–Ω—Å: {player.balance}</div>
                                  <div>üíº –†–∞–±–æ—Ç–∞: {player.job?.title || '–ù–µ—Ç'}</div>
                                  <div>üí≥ –ö—Ä–µ–¥–∏—Ç—ã: {player.credits?.length || 0}</div>
                                </div>
                                <div className="mt-3 flex gap-2">
                                  <Button 
                                    size="sm" 
                                    onClick={async () => {
                                      const newNickname = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∑–≤–∏—â–µ:', player.nickname)
                                      if (newNickname && newNickname !== player.nickname) {
                                        try {
                                          const response = await fetch('/api/admin/set-nickname', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ 
                                              userId: player.id, 
                                              nickname: newNickname 
                                            })
                                          })
                                          if (response.ok) {
                                            loadAdminData()
                                          }
                                        } catch (error) {
                                          console.error('Error updating nickname:', error)
                                        }
                                      }
                                    }}
                                    className="text-xs"
                                  >
                                    –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    variant={player.isAdmin ? "outline" : "destructive"}
                                    onClick={async () => {
                                      try {
                                        await fetch('/api/admin/toggle-admin', {
                                          method: 'POST',
                                          headers: { 'Content-Type': 'application/json' },
                                          body: JSON.stringify({ userId: player.id })
                                        })
                                        loadAdminData()
                                      } catch (error) {
                                        console.error('Error toggling admin:', error)
                                      }
                                    }}
                                    className="text-xs"
                                  >
                                    {player.isAdmin ? '–°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞' : '–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º'}
                                  </Button>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="jobs">
                    <Card className="bg-black/60 backdrop-blur-sm border-2 border-green-500/30 shadow-2xl">
                      <CardHeader className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-t-lg">
                        <CardTitle className="text-xl font-bold flex items-center gap-2">
                          <Work className="h-6 w-6 text-green-400" />
                          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–º–∏
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-6">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-green-400">–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç—É</h3>
                              <div className="space-y-3">
                                <div>
                                  <label className="block text-sm font-medium mb-2">–ò–≥—Ä–æ–∫</label>
                                  <select 
                                    value={selectedPlayer}
                                    onChange={(e) => setSelectedPlayer(e.target.value)}
                                    className="w-full bg-black/40 border border-white/20 rounded px-3 py-2"
                                  >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                    {adminPlayers.map((player: any) => (
                                      <option key={player.id} value={player.id}>
                                        {player.nickname}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                                <div>
                                  <label className="block text-sm font-medium mb-2">–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
                                  <Input 
                                    value={jobTitle}
                                    onChange={(e) => setJobTitle(e.target.value)}
                                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
                                    className="bg-black/40 border border-white/20"
                                  />
                                </div>
                                <div>
                                  <label className="block text-sm font-medium mb-2">–ó–∞—Ä–ø–ª–∞—Ç–∞</label>
                                  <Input 
                                    type="number" 
                                    value={jobSalary}
                                    onChange={(e) => setJobSalary(e.target.value)}
                                    placeholder="–°—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"
                                    className="bg-black/40 border border-white/20"
                                  />
                                </div>
                                <Button 
                                  onClick={handleAssignJob}
                                  className="w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-lg"
                                >
                                  –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç—É
                                </Button>
                              </div>
                            </div>
                            
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-green-400">–¢–µ–∫—É—â–∏–µ —Ä–∞–±–æ—Ç—ã</h3>
                              <div className="space-y-2 max-h-64 overflow-y-auto">
                                {adminJobs.map((job: any) => (
                                  <div key={job.id} className="bg-black/40 p-3 rounded border border-white/10">
                                    <div className="flex justify-between items-center">
                                      <div>
                                        <div className="font-medium">{job.title}</div>
                                        <div className="text-sm opacity-70">üë§ {job.user?.nickname || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}</div>
                                      </div>
                                      <div className="text-right">
                                        <div className="font-bold text-green-400">üçÉ {job.salary}</div>
                                        <div className="text-xs opacity-70">–≤ –¥–µ–Ω—å</div>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="money">
                    <Card className="bg-black/60 backdrop-blur-sm border-2 border-yellow-500/30 shadow-2xl">
                      <CardHeader className="bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-t-lg">
                        <CardTitle className="text-xl font-bold flex items-center gap-2">
                          <MoneyIcon className="h-6 w-6 text-yellow-400" />
                          –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-6">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-yellow-400">–ù–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏</h3>
                              <div className="space-y-3">
                                <div>
                                  <label className="block text-sm font-medium mb-2">–ò–≥—Ä–æ–∫</label>
                                  <select 
                                    value={selectedPlayer}
                                    onChange={(e) => setSelectedPlayer(e.target.value)}
                                    className="w-full bg-black/40 border border-white/20 rounded px-3 py-2"
                                  >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                    {adminPlayers.map((player: any) => (
                                      <option key={player.id} value={player.id}>
                                        {player.nickname} (üçÉ {player.balance})
                                      </option>
                                    ))}
                                  </select>
                                </div>
                                <div>
                                  <label className="block text-sm font-medium mb-2">–°—É–º–º–∞</label>
                                  <Input 
                                    type="number" 
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    className="bg-black/40 border border-white/20"
                                    onKeyPress={(e) => {
                                      if (e.key === 'Enter') {
                                        const input = e.target as HTMLInputElement
                                        const amount = Number(input.value)
                                        if (amount > 0 && selectedPlayer) {
                                          handleAddMoney(selectedPlayer, amount)
                                        }
                                      }
                                    }}
                                  />
                                </div>
                                <Button 
                                  onClick={() => {
                                    const input = document.querySelector('input[placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"]') as HTMLInputElement
                                    const amount = Number(input?.value)
                                    if (amount > 0 && selectedPlayer) {
                                      handleAddMoney(selectedPlayer, amount)
                                    }
                                  }}
                                  className="w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white shadow-lg"
                                >
                                  üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏
                                </Button>
                              </div>
                            </div>
                            
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-yellow-400">–°–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏</h3>
                              <div className="space-y-3">
                                <div>
                                  <label className="block text-sm font-medium mb-2">–ò–≥—Ä–æ–∫</label>
                                  <select 
                                    value={selectedPlayer}
                                    onChange={(e) => setSelectedPlayer(e.target.value)}
                                    className="w-full bg-black/40 border border-white/20 rounded px-3 py-2"
                                  >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                                    {adminPlayers.map((player: any) => (
                                      <option key={player.id} value={player.id}>
                                        {player.nickname} (üçÉ {player.balance})
                                      </option>
                                    ))}
                                  </select>
                                </div>
                                <div>
                                  <label className="block text-sm font-medium mb-2">–°—É–º–º–∞</label>
                                  <Input 
                                    type="number" 
                                    value={deductAmount}
                                    onChange={(e) => setDeductAmount(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                                    className="bg-black/40 border border-white/20"
                                  />
                                </div>
                                <Button 
                                  onClick={handleDeductMoney}
                                  className="w-full bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white shadow-lg"
                                >
                                  üí∏ –°–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="time">
                    <Card className="bg-black/60 backdrop-blur-sm border-2 border-indigo-500/30 shadow-2xl">
                      <CardHeader className="bg-gradient-to-r from-indigo-500/20 to-purple-500/20 rounded-t-lg">
                        <CardTitle className="text-xl font-bold flex items-center gap-2">
                          <Clock className="h-6 w-6 text-indigo-400" />
                          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-6">
                          <div className="text-center">
                            <div className="text-2xl font-bold mb-2">
                              –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {gameSettings?.isDay ? '‚òÄÔ∏è –î–µ–Ω—å' : 'üåô –ù–æ—á—å'}
                            </div>
                            <p className="opacity-70 mb-6">
                              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ü–∏–∫–ª–æ–º –¥–Ω—è –∏ –Ω–æ—á–∏ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç
                            </p>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-indigo-400">–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å</h3>
                              <p className="text-sm opacity-80 mb-4">
                                –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤—ã–ø–ª–∞—Ç–µ –≤—Å–µ—Ö –∑–∞—Ä–ø–ª–∞—Ç –∏–≥—Ä–æ–∫–∞–º
                              </p>
                              <Button 
                                onClick={() => handleDayNightChange('end-day')}
                                className="w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-lg py-4"
                                disabled={!gameSettings?.isDay}
                              >
                                üåÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å
                              </Button>
                            </div>
                            
                            <div className="space-y-4">
                              <h3 className="text-lg font-semibold text-indigo-400">–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á—å</h3>
                              <p className="text-sm opacity-80 mb-4">
                                –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
                              </p>
                              <Button 
                                onClick={() => handleDayNightChange('end-night')}
                                className="w-full bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white shadow-lg py-4"
                                disabled={gameSettings?.isDay}
                              >
                                üåô –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á—å
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                  
                  <TabsContent value="settings">
                    <Card className="bg-black/60 backdrop-blur-sm border-2 border-gray-500/30 shadow-2xl">
                      <CardHeader className="bg-gradient-to-r from-gray-500/20 to-slate-500/20 rounded-t-lg">
                        <CardTitle className="text-xl font-bold flex items-center gap-2">
                          <Settings className="h-6 w-6 text-gray-400" />
                          –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="p-6">
                        <div className="space-y-6">
                          <div className="text-center">
                            <h3 className="text-lg font-semibold text-gray-400 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h3>
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                              <div className="bg-black/40 p-4 rounded-lg">
                                <div className="text-2xl font-bold text-blue-400">{adminPlayers.length}</div>
                                <div className="text-sm opacity-70">–ò–≥—Ä–æ–∫–æ–≤</div>
                              </div>
                              <div className="bg-black/40 p-4 rounded-lg">
                                <div className="text-2xl font-bold text-green-400">{adminJobs.length}</div>
                                <div className="text-sm opacity-70">–†–∞–±–æ—Ç</div>
                              </div>
                              <div className="bg-black/40 p-4 rounded-lg">
                                <div className="text-2xl font-bold text-yellow-400">
                                  {adminPlayers.reduce((sum: number, player: any) => sum + player.balance, 0)}
                                </div>
                                <div className="text-sm opacity-70">–í—Å–µ–≥–æ –¥–µ–Ω–µ–≥</div>
                              </div>
                              <div className="bg-black/40 p-4 rounded-lg">
                                <div className="text-2xl font-bold text-purple-400">
                                  {adminPlayers.filter((p: any) => p.isAdmin).length}
                                </div>
                                <div className="text-sm opacity-70">–ê–¥–º–∏–Ω–æ–≤</div>
                              </div>
                            </div>
                          </div>
                          
                          <div className="border-t border-gray-600/30 pt-6">
                            <h3 className="text-lg font-semibold text-gray-400 mb-4">–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <Button 
                                variant="outline"
                                className="border-red-500/50 text-red-400 hover:bg-red-500/10"
                                onClick={() => {
                                  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã?')) {
                                    // –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
                                  }
                                }}
                              >
                                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
                              </Button>
                              <Button 
                                variant="outline"
                                className="border-orange-500/50 text-orange-400 hover:bg-orange-500/10"
                                onClick={() => {
                                  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—Ç—ã?')) {
                                    // –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç
                                  }
                                }}
                              >
                                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—ã
                              </Button>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </TabsContent>
                </Tabs>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      )}

      {/* –ù–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
      {showNightMessage && (
        <div className="fixed inset-0 bg-black flex items-center justify-center z-50">
          <div className="text-white text-center animate-pulse">
            <h1 className="text-6xl md:text-8xl font-bold mb-4 text-red-400">–°–ü–ê–¢–¨ –í–ê–õ–ò–¢–ï</h1>
            <p className="text-xl md:text-2xl text-gray-300">–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å!</p>
          </div>
        </div>
      )}

      {/* –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—Ä–µ–¥–∏—Ç–µ */}
      {creditReminder && userData && userData.credits.length > 0 && (
        <div className="fixed top-20 left-4 right-4 z-40">
          <div className="bg-red-500/90 backdrop-blur-sm text-white p-4 rounded-lg shadow-lg border border-red-400 animate-bounce">
            <div className="flex items-center gap-2">
              <CreditCard className="h-5 w-5" />
              <p className="font-medium">
                üí∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à –¥–æ–ª–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {userData.credits.reduce((sum, credit) => sum + credit.amount, 0)}
              </p>
            </div>
            <p className="text-sm mt-1 opacity-90">30% –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å–∞–Ω–æ</p>
          </div>
        </div>
      )}
    </div>
  )
}